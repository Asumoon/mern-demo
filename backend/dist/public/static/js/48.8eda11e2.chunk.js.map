{"version":3,"file":"static/js/48.8eda11e2.chunk.js","mappings":"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","sources":["modules/movie/components/movieList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Snackbar, Modal, TextField, Button } from \"@mui/material\";\n\n// Define Movie type\ninterface Movie {\n  title: string;\n  year: number;\n  genre: string;\n  image: string;\n}\n\nfunction MovieTable() {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n  const [open, setOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false); // State to check if editing or adding\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      try {\n        const res = await axios.get(`/api/movies?page=${page}`);\n        setMovies((prevMovies) => [\n          ...prevMovies,\n          ...(res.data.data as Movie[]),\n        ]);\n      } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n      }\n      setLoading(false);\n    };\n\n    fetchMovies();\n  }, [page]);\n  \n\n\n  // Define the deleteMovie function\n  const deleteMovie = async (title: string) => {\n    try {\n      await axios.delete(`/api/movies/${title}`);\n      // After deleting, update the movies list by filtering out the deleted movie\n      setMovies((prevMovies) =>\n        prevMovies.filter((movie) => movie.title !== title)\n      );\n      // Set success message and show Snackbar\n      setSuccessMessage(\"Movie deleted successfully!\");\n      setOpenSnackbar(true);\n    } catch (error) {\n      console.error(\"Error deleting movie:\", error);\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: { [key: string]: string } = {};\n    if (!selectedMovie?.title) newErrors.title = \"Title is required\";\n    if (!selectedMovie?.year) newErrors.year = \"Year is required\";\n    if (!selectedMovie?.genre) newErrors.genre = \"Genre is required\";\n    if (!selectedMovie?.image) newErrors.image = \"Image URL is required\";\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Open modal for adding a new movie\n  const addMovie = () => {\n    setSelectedMovie({ title: \"\", year: 0, genre: \"\", image: \"\" });\n    // setSelectedMovie(null); // Clear the selected movie for adding a new one\n    setIsEditing(false); // Set to adding mode\n    setErrors({});\n    setOpen(true); // Open the modal\n  };\n\n  // Open modal with movie details to edit\n  const editMovie = (movie: Movie) => {\n    setSelectedMovie(movie); // Set the selected movie in state\n    setIsEditing(true); // Set to editing mode\n    setErrors({});\n    setOpen(true); // Open the modal\n  };\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 &&\n      !loading\n    ) {\n      setPage((prevPage) => prevPage + 1);\n    }\n  };\n\n  // Close the snackbar\n  const handleCloseSnackbar = () => {\n    setOpenSnackbar(false);\n  };\n\n  // Handle save (both add and edit)\n  const handleSave = async () => {\n    if (selectedMovie && validateForm()) {\n      if (isEditing) {\n        // Edit movie (PUT request)\n        try {\n          await axios.put(`/api/movies/${selectedMovie.title}`, selectedMovie);\n          setMovies((prevMovies) =>\n            prevMovies.map((movie) =>\n              movie.title === selectedMovie.title ? selectedMovie : movie\n            )\n          );\n        } catch (error) {\n          console.error(\"Error updating movie:\", error);\n        }\n      } else {\n        try {\n          const res = await axios.post(\"/api/movies\", selectedMovie);\n          setMovies((prevMovies) => [...prevMovies, res.data]); // Add the new movie to the list\n        } catch (error) {\n          console.error(\"Error adding movie:\", error);\n        }\n      }\n    }\n    setOpen(false); // Close the modal\n  };\n\n  // Handle changes to the movie fields in the modal\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (selectedMovie) {\n      setSelectedMovie({\n        ...selectedMovie,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n  useEffect(() => {\n\t\tconst fetchMovies = async () => {\n\t\t\tsetLoading(true);\n\t\t\ttry {\n\t\t\t\tconst res = await axios.get(`/api/movies?page=${page}`);\n\t\t\t\tsetMovies((prevMovies) => [\n\t\t\t\t\t...prevMovies,\n\t\t\t\t\t...(res.data.data as Movie[]),\n\t\t\t\t]);\n\t\t\t\tconsole.log(\"-- xyz movies --> \", movies);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error fetching movies:\", error);\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t};\n\n\t\tfetchMovies();\n\t}, [page]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [loading]);\n\n  return (\n    <div className=\"container mx-auto px-4\">\n      <div className=\"flex justify-end mb-4\">\n        <button\n          onClick={addMovie}\n          className=\"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\"\n        >\n          Add New Movie\n        </button>\n      </div>\n\n      <table className=\"min-w-full bg-zinc-100 border border-gray-200 rounded-lg\">\n        <thead>\n          <tr>\n            <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-gray-700 font-semibold tracking-wider\">\n              Title\n            </th>\n            <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-gray-700 font-semibold tracking-wider\">\n              Year\n            </th>\n            <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-gray-700 font-semibold tracking-wider\">\n              Genre\n            </th>\n            <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-gray-700 font-semibold tracking-wider\">\n              Image\n            </th>\n            <th className=\"px-6 py-3 border-b-2 border-gray-300 text-left text-gray-700 font-semibold tracking-wider\">\n              Actions\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {movies.map((movie) => (\n            <tr key={movie.title}>\n              <td className=\"px-6 py-4 border-b border-gray-200\">\n                {movie.title}\n              </td>\n              <td className=\"px-6 py-4 border-b border-gray-200\">\n                {movie.year}\n              </td>\n              <td className=\"px-6 py-4 border-b border-gray-200\">\n                {movie.genre}\n              </td>\n              <td className=\"px-6 py-4 border-b border-gray-200\">\n                <img src={movie.image} alt={movie.title} width=\"50\" />\n              </td>\n              <td className=\"px-6 py-4 border-b border-gray-200\">\n                <button\n                  onClick={() => editMovie(movie)}\n                  className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50\"\n                >\n                  Edit\n                </button>\n                <button\n                  onClick={() => deleteMovie(movie.title)}\n                  className=\"ml-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-50\"\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* Modal for adding/editing a movie */}\n      {open && (\n        <div className=\"fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg w-96\">\n            <h2 className=\"text-lg font-bold mb-4\">\n              {isEditing ? \"Edit Movie\" : \"Add New Movie\"}\n            </h2>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Title</label>\n              <input\n                type=\"text\"\n                name=\"title\"\n                value={selectedMovie?.title || \"\"}\n                onChange={handleChange}\n                className=\"w-full p-2 border border-gray-300 rounded mt-1\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title}</p>\n              )}\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Year</label>\n              <input\n                type=\"number\"\n                name=\"year\"\n                value={selectedMovie?.year || \"\"}\n                onChange={handleChange}\n                className=\"w-full p-2 border border-gray-300 rounded mt-1\"\n              />\n              {errors.year && (\n                <p className=\"text-red-500 text-sm\">{errors.year}</p>\n              )}\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Genre</label>\n              <input\n                type=\"text\"\n                name=\"genre\"\n                value={selectedMovie?.genre || \"\"}\n                onChange={handleChange}\n                className=\"w-full p-2 border border-gray-300 rounded mt-1\"\n              />\n              {errors.genre && (\n                <p className=\"text-red-500 text-sm\">{errors.genre}</p>\n              )}\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Image URL</label>\n              <input\n                type=\"text\"\n                name=\"image\"\n                value={selectedMovie?.image || \"\"}\n                onChange={handleChange}\n                className=\"w-full p-2 border border-gray-300 rounded mt-1\"\n              />\n              {errors.image && (\n                <p className=\"text-red-500 text-sm\">{errors.image}</p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                onClick={handleSave}\n                className=\"bg-blue-500 text-white py-2 px-4 rounded mr-2 hover:bg-blue-600\"\n              >\n                {isEditing ? \"Save Changes\" : \"Add Movie\"}\n              </button>\n              <button\n                onClick={() => setOpen(false)}\n                className=\"bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success Snackbar */}\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={3000}\n        onClose={handleCloseSnackbar}\n        message={successMessage}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      />\n    </div>\n  );\n}\n\nexport default MovieTable;\n"],"names":["movies","setMovies","useState","page","setPage","loading","setLoading","selectedMovie","setSelectedMovie","open","setOpen","isEditing","setIsEditing","errors","setErrors","successMessage","setSuccessMessage","openSnackbar","setOpenSnackbar","useEffect","async","res","axios","get","prevMovies","data","error","console","fetchMovies","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","prevPage","handleChange","e","target","name","value","log","addEventListener","removeEventListener","_jsxs","className","children","_jsx","onClick","addMovie","title","year","genre","image","map","movie","src","alt","width","editMovie","delete","filter","deleteMovie","type","onChange","validateForm","newErrors","Object","keys","length","put","post","Snackbar","autoHideDuration","onClose","handleCloseSnackbar","message","anchorOrigin","vertical","horizontal"],"sourceRoot":""}